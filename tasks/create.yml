---
- name: Include VPC facts tasks if subnet ID is empty
  import_tasks: vpc-facts.yml
  when: mec2_vpc_subnet_id == ""

- name: Create security group
  ec2_group:
    name: "{{ mec2_security_group_name }}"
    description: "{{ mec2_security_group_description }}"
    tags:
      Name: "{{ mec2_security_group_name }}"
      molecule-ec2-manager/managed: "1"
    rules: "{{ mec2_security_group_default_rules + mec2_security_group_extra_rules }}"
    rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: 0.0.0.0/0
    purge_rules: false

- name: Include keypair creation tasks
  import_tasks: keypair.yml

- name: Get AMI ID(s) by distro name
  ec2_ami_facts:
    owners: "{{ mec2_distros[item.distro]['ami_owner'] }}"
    filters:
      name: "{{ mec2_distros[item.distro]['ami_name'] }}"
  loop: "{{ molecule_yml.platforms }}"
  register: mec2_ami_facts

- name: Create Molecule instance(s)
  ec2:
    image: "{{
      (mec2_ami_facts.results[platform].images | sort(attribute='creation_date', reverse=True))[0].image_id
    }}"
    instance_type: "{{ item.instance_type | default(mec2_instance_type) }}"
    key_name: "{{ mec2_keypair_name }}"
    group: "{{ mec2_security_group_name }}"
    vpc_subnet_id: "{{ mec2_vpc_subnet_id }}"
    assign_public_ip: true
    instance_tags:
      Name: "{{ item.name }}"
      molecule-ec2-manager/managed: "1"
      molecule-ec2-manager/instance: "{{ item.name }}"
      molecule-ec2-manager/distro: "{{ item.distro }}"
      molecule-ec2-manager/run-id: "{{ mec2_molecule_run_id }}"
    exact_count: 1
    count_tag:
      molecule-ec2-manager/instance: "{{ item.name }}"
    region: "{{ mec2_aws_region }}"
    wait: true
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: platform
  register: mec2_create_instances
  async: 7200
  poll: 0

- name: Wait for instance(s) creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  loop: "{{ mec2_create_instances.results }}"
  register: mec2_ec2_jobs
  until: mec2_ec2_jobs.finished
  retries: 300

# NOTE: mandatory configuration for Molecule to function!
- name: Populate instance config dict
  set_fact:
    instance_conf_dict:
      instance: "{{ item.instances[0].tags['molecule-ec2-manager/instance'] }}"
      address: "{{ item.instances[0].public_ip }}"
      user: "{{ mec2_distros[item.instances[0].tags['molecule-ec2-manager/distro']].ssh_user }}"
      port: "{{ mec2_ssh_port }}"
      identity_file: "{{ mec2_keypair_local_path }}"
      instance_ids: "{{ item.instance_ids }}"
  loop: "{{ mec2_ec2_jobs.results }}"
  register: mec2_instance_config_dict
  when: mec2_create_instances.changed

- name: Convert instance config dict to a list
  set_fact:
    instance_conf: "{{ mec2_instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
  when: mec2_create_instances.changed

- name: Save Molecule instance config file
  copy:
    content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
    dest: "{{ molecule_instance_config }}"
  when: mec2_create_instances.changed

- name: Wait SSH port become available
  wait_for:
    port: "{{ mec2_ssh_port }}"
    host: "{{ item.address }}"
    search_regex: SSH
    delay: 10
    timeout: 320
  loop: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"

- name: Wait for boot process to finish
  pause:
    seconds: "{{ mec2_boot_wait_seconds }}"
